name: Build Dolphin Wii Core (With Fallback)

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-core:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential cmake ninja-build python3 git curl

      - name: Install Emscripten SDK
        run: |
          git clone https://github.com/emscripten-core/emsdk.git
          cd emsdk
          ./emsdk install latest
          ./emsdk activate latest
          chmod +x ./emsdk_env.sh
          echo "source $(pwd)/emsdk_env.sh" >> $GITHUB_ENV

      - name: Load Emscripten environment
        shell: bash
        run: |
          source ./emsdk/emsdk_env.sh

      - name: CMake configuration
        run: |
          source ./emsdk/emsdk_env.sh
          mkdir -p build-web
          cd build-web
          emcmake cmake .. \
            -DCMAKE_BUILD_TYPE=Release \
            -DENABLE_GENERIC=ON \
            -DENABLE_QT=OFF \
            -DENABLE_SDL=OFF \
            -DENABLE_NOGUI=ON \
            -DENABLE_TESTS=OFF \
            -DARCH_X86=OFF -DARCH_X86_64=OFF \
            -DBASEARCH_X86_FOUND=OFF \
            -DZLIB_DONT_USE_X86_FEATURES=ON

      - name: Build with retries (non-fatal)
        continue-on-error: true
        run: |
          source ./emsdk/emsdk_env.sh
          cd build-web
          MAX_RETRIES=3
          COUNT=1
          until cmake --build . --target core; do
            if [ $COUNT -ge $MAX_RETRIES ]; then
              echo "Build failed after $COUNT attempts. Proceeding with fallback."
              break
            fi
            echo "Build failed, retrying ($COUNT/$MAX_RETRIES)..."
            COUNT=$((COUNT + 1))
            sleep 5
          done

      - name: Fallback link to wasm/js
        continue-on-error: true
        run: |
          source ./emsdk/emsdk_env.sh
          cd build-web
          OBJ_FILES=$(find . -name "*.o")
          if [ -n "$OBJ_FILES" ]; then
            echo "Linking available object files into fallback.wasm and fallback.js"
            emcc $OBJ_FILES -o dolphin-fallback.js || echo "Fallback linking failed"
          else
            echo "No object files found for fallback link."
          fi

      - name: List wasm/js artifacts
        run: |
          cd build-web
          find . -type f \( -name "*.wasm" -o -name "*.js" \)

      - name: Upload only wasm/js artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dolphin-wasm-js
          path: |
            build-web/**/*.wasm
            build-web/**/*.js
